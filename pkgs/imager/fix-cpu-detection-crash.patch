diff --git a/kernel/lib/sic/sicopt.f90 b/kernel/lib/sic/sicopt.f90
index 432a302..b083c77 100644
--- a/kernel/lib/sic/sicopt.f90
+++ b/kernel/lib/sic/sicopt.f90
@@ -565,7 +565,6 @@ subroutine sic_variables(error)
   character(len=12), save :: prognam
   character(len=20), save :: version,usernam,hostnam  ! Support variables
   integer :: ier, nt, ns
-  character(len=80) :: string
   integer :: cpu_per_core
   !
   call sic_def_dble ('PI',pi,0,0,.true.,error)
@@ -865,7 +864,8 @@ integer function sys_getcpupercore(ncores)
   !! integer, intent(out) :: sys_getcpupercore
   integer, intent(in) :: ncores
   !
-  integer :: cpu_per_core, ier, nt
+  integer :: cpu_per_core, ier
+  real :: rnt
   character(len=80) :: string
   !
   ! The DARWIN code could be replaced by a direct call to the C function
@@ -878,6 +878,7 @@ integer function sys_getcpupercore(ncores)
 #if defined(DARWIN)
   string = 'sysctl -n hw.physicalcpu > ~/.gag/core.txt'
 #else
+!  string = "LANG=C; lscpu | grep -E '^Thread|^Core|^Socket|^CPU\('"
   string = 'lscpu --all --parse=CORE | grep -Ev "^#" | sort -u | wc -l > ~/.gag/core.txt'
 #endif
 #if defined(WIN32)
@@ -890,8 +891,8 @@ integer function sys_getcpupercore(ncores)
     if (ier.ne.0) then
       call putios('Open status ',ier)
     else
-      read(1,*) nt
-      cpu_per_core = ncores/nt
+      read(1,*) rnt ! May be > by a few units compared to CPU count, because of blank lines
+      cpu_per_core = max(1,nint(real(ncores)/rnt))  ! Ensure no crash
     endif
     close(unit=1) 
   endif
